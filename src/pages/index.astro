---
import PasteImage from '../components/PasteImage.astro';
import { gameAwards } from '../components/GameAwards.astro';
import SearchGame from '../components/SearchGame.tsx';
import QRCodeComponent from '../components/QRCode';
---

<!DOCTYPE html>
<html lang="zh-CN">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>My 2024 The "fuck you official TGA" Game Awards</title>
  </head>
  
  <body class="m-0 p-0 font-sans flex flex-row items-start">
    <button class="screenshot-btn fixed top-5 right-5 px-5 py-2.5 bg-gray-800 text-white border-none rounded cursor-pointer z-50 text-base hover:bg-gray-600">
      下载截图
    </button>
    <div class="max-w-[700px] mx-auto" id="capture">
      <div class="flex items-center p-5 bg-white w-full box-border">
        <div class="relative w-[50px] h-[50px] mr-2.5">
          <img src="/tga_icon_2024.svg" alt="TGA Icon" class="absolute w-full h-full top-0 left-0 z-10 opacity-100 rotate-180" />
        </div>
        <div class="w-0.5 h-[50px] bg-black mx-2.5"></div>
        <div>
          <div class="text-base md:text-4xl font-bold text-black">我的 2024 年度游戏大奖</div>
          <div class="text-sm md:text-2xl font-normal text-gray-500 italic">My 2024 The "fuck you official TGA" Game Awards</div>
        </div>
      </div>

      <div class="w-full grid grid-cols-2 gap-5 p-5 min-h-screen box-border">
        <div class="grid grid-rows-[repeat(7,1fr)] gap-2.5">
          {gameAwards.map(() => (
            <div class="p-2.5 h-auto min-h-[120px] relative">
              <PasteImage />
              <div class="search-game-container hidden absolute top-full left-0 w-full z-50 bg-white mt-2">
                <SearchGame client:load />
              </div>
            </div>
          ))}
        </div>
        <div class="grid grid-rows-[repeat(7,1fr)] gap-2.5">
          {gameAwards.map((award) => (
            <div class="p-2.5 flex flex-col items-start gap-1.5 min-h-[120px] border-none">
              <div class="text-base md:text-2xl font-bold">
                {award.isSpecial ? (
                  <>
                    最<input type="text" class="auto-resize-input border-none text-2xl font-bold p-0 m-0 mx-1 bg-transparent font-inherit min-w-[2em]" />游戏
                  </>
                ) : (
                  award.title
                )}
              </div>
              <textarea 
                class="p-2 border-none border-b border-gray-300 rounded-none text-base w-[90%] bg-transparent transition-all duration-300 ease-in-out focus:outline-none focus:border-gray-600 resize-none overflow-hidden"
                placeholder="请输入感想"
                rows="1"
              ></textarea>
            </div>
          ))}
        </div>
      </div>
      <div id="qrcode-container" class="hidden">
        <QRCodeComponent client:load />
      </div>
    </div>



    <script src="https://html2canvas.hertzen.com/dist/html2canvas.min.js"></script>
    <script>
      // 添加类型声明
      declare const html2canvas: any;

      // 自动调整输入框宽度的函数
      function adjustInputWidth(input: HTMLInputElement) {
        // 创建一个隐藏的span来测量文本宽度
        const span = document.createElement('span');
        span.style.visibility = 'hidden';
        span.style.position = 'absolute';
        span.style.whiteSpace = 'pre';
        // 复制输入框的字体样式
        span.style.fontSize = getComputedStyle(input).fontSize;
        span.style.fontFamily = getComputedStyle(input).fontFamily;
        span.style.fontWeight = getComputedStyle(input).fontWeight;
        document.body.appendChild(span);

        // 设置span的文本内容
        const value = input.value || input.placeholder || '';
        span.textContent = value;

        // 计算宽度（添加一些padding以防止文字太贴近边缘）
        const width = span.offsetWidth + 4;
        
        // 设置最小宽度
        input.style.width = Math.max(32, width) + 'px';
        
        // 清理DOM
        document.body.removeChild(span);
      }

      // 为所有auto-resize-input类的输入框添加事件监听
      const autoResizeInputs = document.querySelectorAll('.auto-resize-input');
      autoResizeInputs.forEach(input => {
        if (input instanceof HTMLInputElement) {
          // 初始化时调整一次
          adjustInputWidth(input);
          
          // 输入时调整
          input.addEventListener('input', () => adjustInputWidth(input));
          
          // 窗口大小改变时调整
          window.addEventListener('resize', () => adjustInputWidth(input));
        }
      });

      const inlineInputs = document.querySelectorAll('.inline-input');
      inlineInputs.forEach(input => {
        input.setAttribute('minLength', '3');
        input.addEventListener('input', function(this: HTMLInputElement) {
          const length = Math.max(3, this.value.length);
          this.style.width = length + 'em';
        });
      });
      
      // screenshot
      const screenshotBtn = document.querySelector('.screenshot-btn');
      if (screenshotBtn) {
        screenshotBtn.addEventListener('click', async function() {
          const captureElement = document.querySelector("#capture");
          const qrcodeContainer = document.querySelector("#qrcode-container");
          if (!captureElement || !qrcodeContainer) return;

          // 保存所有auto-resize-input的值和元素引用
          const inputs = Array.from(document.querySelectorAll('.auto-resize-input'));
          const inputStates = inputs.map(input => ({
            element: input,
            value: (input as HTMLInputElement).value,
            parent: input.parentElement
          })).filter(state => state.parent !== null);

          try {
            // 显示二维码
            qrcodeContainer.classList.remove('hidden');
            
            // 临时替换input为纯文本
            inputStates.forEach(({element, value, parent}) => {
              const text = document.createTextNode(value || '');
              if (parent) {
                parent.replaceChild(text, element);
              }
            });

            // 等待一小段时间确保二维码已经渲染
            await new Promise(resolve => setTimeout(resolve, 100));

            // 截图
            const canvas = await html2canvas(captureElement, { 
              allowTaint: false, 
              useCORS: true,
              scale: 2 // 提高输出质量
            });
            
            // 下载
            const link = document.createElement('a');
            link.download = 'my-tga-awards.png';
            link.href = canvas.toDataURL('image/png');
            link.click();
          } catch (error) {
            console.error('Screenshot failed:', error);
          } finally {
            // 恢复input
            inputStates.forEach(({element, parent}) => {
              const currentText = parent?.childNodes[1];
              if (parent && currentText) {
                parent.replaceChild(element, currentText);
              }
            });
            // 隐藏二维码
            qrcodeContainer.classList.add('hidden');
          }
        });
      }

      // 处理PasteArea的选中状态
      function initSearchGameContainers() {
        const containers = document.querySelectorAll('.p-2\\.5.h-auto');
        
        containers.forEach(container => {
          const pasteArea = container.querySelector('#pasteArea');
          const searchContainer = container.querySelector('.search-game-container');
          
          if (pasteArea && searchContainer) {
            // 移除旧的事件监听器
            pasteArea.removeEventListener('pastearea-select', () => {});
            pasteArea.removeEventListener('pastearea-deselect', () => {});
            
            // 添加新的事件监听器
            pasteArea.addEventListener('pastearea-select', () => {
              // 隐藏其他搜索容器
              document.querySelectorAll('.search-game-container').forEach(el => {
                if (el !== searchContainer) {
                  el.classList.add('hidden');
                }
              });
              // 显示当前搜索容器
              searchContainer.classList.remove('hidden');
              console.log('显示搜索容器'); // 调试日志
            });
            
            pasteArea.addEventListener('pastearea-deselect', () => {
              searchContainer.classList.add('hidden');
              console.log('隐藏搜索容器'); // 调试日志
            });
          }
        });
      }

      // 确保在页面加载和视图更新时都初始化
      document.addEventListener('DOMContentLoaded', initSearchGameContainers);
      document.addEventListener('astro:page-load', initSearchGameContainers);

      // 自动调整textarea高度的函数
      function autoResizeTextarea(textarea: HTMLTextAreaElement) {
        textarea.style.height = 'auto';
        textarea.style.height = textarea.scrollHeight + 'px';
      }

      // 为所有textarea添加自动调整高度功能
      document.querySelectorAll('textarea').forEach(textarea => {
        textarea.addEventListener('input', () => autoResizeTextarea(textarea));
        // 初始化时调整一次
        autoResizeTextarea(textarea);
      });
    </script>
  </body>
</html>